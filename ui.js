// ui.js - Phi√™n b·∫£n c·∫≠p nh·∫≠t s·ª≠ d·ª•ng API

// Bi·∫øn tr·∫°ng th√°i UI
let currentHierarchyData = []; // L∆∞u tr·ªØ c·∫•u tr√∫c c√¢y m·ªõi nh·∫•t t·ª´ API
let currentSelectedItem = null; // L∆∞u tr·ªØ th√¥ng tin m·ª•c ƒëang ƒë∆∞·ª£c ch·ªçn (folder ho·∫∑c group)
let currentCards = []; // L∆∞u tr·ªØ danh s√°ch th·∫ª c·ªßa nh√≥m ƒëang xem
let currentMindmapContent = null; // L∆∞u tr·ªØ n·ªôi dung mindmap ƒëang xem

// Tham chi·∫øu ƒë·∫øn c√°c ph·∫ßn t·ª≠ DOM 
let hierarchyView = document.getElementById('hierarchy-view');
let flashcardView = document.getElementById('flashcard-view');
let mindmapView = document.getElementById('mindmap-view');
let flashcardViewTitle = document.getElementById('flashcard-view-title');
let mindmapViewTitle = document.getElementById('mindmap-view-title');
let mindmapMarkdownInput = document.getElementById('mindmap-markdown-input');
let mindmapSvgElement = document.getElementById('mindmap-svg');
let currentMindmapInstance = null;

// C√°c h√†m ti·ªán √≠ch
function toggleTheme() {
    console.log("UI: toggleTheme called."); // Th√™m d√≤ng n√†y
    const isDarkMode = document.body.classList.toggle('dark-mode');
    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa checkbox (n·∫øu c·∫ßn, nh∆∞ng listener change th∆∞·ªùng t·ª± x·ª≠ l√Ω)
    const themeSwitch = document.getElementById('theme-switch');
    if (themeSwitch) themeSwitch.checked = isDarkMode;
}
function applyInitialTheme() {
    console.log("UI: Applying initial theme..."); // Th√™m d√≤ng n√†y
    const savedTheme = localStorage.getItem('theme') || 'light';
    console.log("UI: Saved theme is:", savedTheme); // Th√™m d√≤ng n√†y
    const themeSwitch = document.getElementById('theme-switch'); // L·∫•y input switch

    if (savedTheme === 'dark') {
        document.body.classList.add('dark-mode');
        if (themeSwitch) themeSwitch.checked = true; // Check √¥ input n·∫øu l√† dark
    } else {
        document.body.classList.remove('dark-mode');
         if (themeSwitch) themeSwitch.checked = false; // Uncheck √¥ input n·∫øu l√† light
    }
    console.log("UI: Initial theme applied."); // Th√™m d√≤ng n√†y
}
function highlightDiff(wrong, correct) {
    const wrongWords = wrong.trim().split(/\s+/);
    const correctWords = correct.trim().split(/\s+/);
    let result = [];

    const maxLength = Math.max(wrongWords.length, correctWords.length);
    for (let i = 0; i < maxLength; i++) {
        const wrongWord = wrongWords[i] || '';
        const correctWord = correctWords[i] || '';
        if (wrongWord.toLowerCase() === correctWord.toLowerCase()) { // So s√°nh kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
            result.push(correctWord);
        } else {
            // Hi·ªÉn th·ªã t·ª´ ƒë√∫ng m√†u ƒë·ªè, t·ª´ sai g·∫°ch ngang 
             result.push(`<span style="color: red; font-weight: bold;">${correctWord || '[thi·∫øu]'}</span>` + (wrongWord ? ` <s style="color: grey;">${wrongWord}</s>` : ''));
        }
    }
    return result.join(' ');
}

function escapeHtml(unsafe) {
    if (typeof unsafe !== 'string') return unsafe;
            return unsafe
                 .replace(/&/g, "&amp;")
                 .replace(/</g, "&lt;")
                 .replace(/>/g, "&gt;")
                 .replace(/"/g, "&quot;")
                 .replace(/'/g, "&#039;");
        }

function debounce(func, wait) {
    let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func.apply(this, args); // G·ªçi h√†m g·ªëc v·ªõi ƒë√∫ng ng·ªØ c·∫£nh v√† tham s·ªë
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
        
        // T·∫°o phi√™n b·∫£n debounced c·ªßa h√†m render hi·ªán c√≥ trong ui.js
        // ƒê·∫∑t d√≤ng n√†y ·ªü scope ph√π h·ª£p, c√≥ th·ªÉ l√† global trong ui.js ho·∫∑c trong h√†m kh·ªüi t·∫°o UI
        const debouncedRenderMindmapPreview = debounce(renderCurrentMindmapPreview, 400);

// H√†m hi·ªÉn th·ªã th√¥ng b√°o (c√≥ th·ªÉ c·∫£i thi·ªán)
function showToastNotification(message, type = "info") {
    // T·∫°m th·ªùi d√πng alert, b·∫°n c√≥ th·ªÉ thay b·∫±ng th∆∞ vi·ªán toast ƒë·∫πp h∆°n
    alert(`[${type.toUpperCase()}] ${message}`);
    console.log(`[${type.toUpperCase()}] Notification: ${message}`);
}

// --- H√†m t·∫£i v√† render d·ªØ li·ªáu t·ª´ API ---

/**
 * T·∫£i c·∫•u tr√∫c c√¢y t·ª´ API v√† l∆∞u v√†o currentHierarchyData, sau ƒë√≥ render.
 */
async function loadAndRenderHierarchy() {
    console.log("UI: Loading hierarchy...");
    try {
        // G·ªçi h√†m API t·ª´ db.js
        currentHierarchyData = await fetchHierarchy(); // fetchHierarchy ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong db.js m·ªõi
        console.log("UI: Hierarchy loaded:", currentHierarchyData);
        renderHierarchyView(); // Render c·∫•u tr√∫c c√¢y m·ªõi
        // C·∫≠p nh·∫≠t c√°c dropdown li√™n quan sau khi c√≥ d·ªØ li·ªáu m·ªõi
        populateParentFolderSelect();
        populateMoveTargetSelect();
        updateManagementControlsState(); // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t d·ª±a tr√™n d·ªØ li·ªáu m·ªõi
    } catch (error) {
        console.error("UI: Failed to load hierarchy", error);
        showToastNotification(`L·ªói t·∫£i d·ªØ li·ªáu th∆∞ m·ª•c: ${error.message}`, "error");
        // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói trong khu v·ª±c hierarchy
        const container = document.getElementById('hierarchy-container');
        if (container) container.innerHTML = `<p style="color: red;">Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.</p>`;
    }
}

/**
 * Render c·∫•u tr√∫c c√¢y th∆∞ m·ª•c/nh√≥m v√†o #hierarchy-container.
 * S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ currentHierarchyData.
 */
function renderHierarchyView() {
    const container = document.getElementById('hierarchy-container');
    if (!container) {
        console.error("UI Error: Kh√¥ng t√¨m th·∫•y #hierarchy-container.");
        return;
    }
    container.innerHTML = ''; // X√≥a n·ªôi dung c≈©
    const fragment = document.createDocumentFragment();

    function createItemElement(item, isChild = false) {
        const element = document.createElement('div');
        element.className = `hierarchy-item ${item.type}-item ${isChild ? 'child-item' : ''}`;
        element.dataset.id = item.id;
        element.dataset.type = item.type; // L∆∞u c·∫£ type

        let content = '';
        if (item.type === 'folder') {
            content = `<span class="item-name folder-name">üìÅ ${escapeHtml(item.name)}</span>`;
            element.innerHTML = content;
            // ƒê·ªá quy render con c·ªßa th∆∞ m·ª•c
            if (item.children && item.children.length > 0) {
                const childrenContainer = document.createElement('div');
                childrenContainer.className = 'folder-children';
                item.children.forEach(child => {
                    childrenContainer.appendChild(createItemElement(child, true));
                });
                element.appendChild(childrenContainer);
            }
        } else if (item.type === 'group') {
            // T·∫°m th·ªùi kh√¥ng hi·ªÉn th·ªã s·ªë th·∫ª ·ªü ƒë√¢y v√¨ c·∫ßn fetch ri√™ng
            content = `<span class="item-name group-name">üìÑ ${escapeHtml(item.name)}</span>`;
             element.innerHTML = content;
        }
        // Th√™m class 'selected' n·∫øu item n√†y ƒëang ƒë∆∞·ª£c ch·ªçn
        if (currentSelectedItem && currentSelectedItem.id === item.id && currentSelectedItem.type === item.type) {
            element.classList.add('selected');
        }

        return element;
    }

    // Render c√°c m·ª•c g·ªëc
    if (currentHierarchyData && currentHierarchyData.length > 0) {
        currentHierarchyData.forEach(item => {
            fragment.appendChild(createItemElement(item));
        });
    }

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ g√¨ ƒë·ªÉ hi·ªÉn th·ªã
    if (fragment.childElementCount === 0) {
        container.innerHTML = '<p>Ch∆∞a c√≥ th∆∞ m·ª•c ho·∫∑c nh√≥m n√†o. H√£y t·∫°o m·ªõi!</p>';
    } else {
        container.appendChild(fragment);
    }
     // C·∫≠p nh·∫≠t l·∫°i c√°c control sau khi render
     updateManagementControlsState();
     populateParentFolderSelect();
     populateMoveTargetSelect();
}

/**
 * Render danh s√°ch th·∫ª v√†o #flashcards.
 * S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ currentCards.
 */
function renderCardsView() {
    const container = document.getElementById('flashcards');
    if (!container) {
        console.error("UI Error: Kh√¥ng t√¨m th·∫•y container #flashcards.");
        return;
    }
    container.innerHTML = ''; // X√≥a n·ªôi dung c≈©

    // Ki·ªÉm tra xem c√≥ ƒëang ·ªü flashcard view v√† c√≥ th·∫ª kh√¥ng
    if (!flashcardView || flashcardView.classList.contains('hidden') || !currentSelectedItem || currentSelectedItem.type !== 'group') {
        container.innerHTML = '<p style="text-align: center; margin-top: 20px;">Ch·ªçn m·ªôt nh√≥m b√†i h·ªçc ƒë·ªÉ xem th·∫ª.</p>';
        return;
    }

    if (currentCards.length === 0) {
        container.innerHTML = "<p>Nh√≥m n√†y ch∆∞a c√≥ th·∫ª n√†o. H√£y th√™m th·∫ª!</p>";
        document.getElementById('start-quiz-btn').disabled = true; // V√¥ hi·ªáu h√≥a quiz
        return;
    }

    document.getElementById('start-quiz-btn').disabled = false; // K√≠ch ho·∫°t quiz

    const fragment = document.createDocumentFragment();
    currentCards.forEach((card) => { // Kh√¥ng c·∫ßn index n·ªØa v√¨ c√≥ card.id
        const cardEl = document.createElement('div');
        cardEl.className = 'flashcard';
        cardEl.dataset.cardId = card.id; // S·ª≠ d·ª•ng ID th·∫ª t·ª´ API

        // S·ª≠ d·ª•ng textContent cho ph·∫ßn tƒ©nh, innerHTML cho ph·∫ßn c√≥ input/button
        const questionDiv = document.createElement('div');
        // L∆∞u √Ω: Kh√¥ng n√™n d√πng input tr·ª±c ti·∫øp ƒë·ªÉ s·ª≠a ·ªü ƒë√¢y n·ªØa,
        // vi·ªác s·ª≠a th·∫ª n√™n c√≥ n√∫t "S·ª≠a" ri√™ng ho·∫∑c form ri√™ng.
        // Hi·ªÉn th·ªã text tƒ©nh tr∆∞·ªõc.
        questionDiv.innerHTML = `<strong>Q:</strong> <span class="card-text question-text">${escapeHtml(card.question)}</span>`;

        const answerDiv = document.createElement('div');
        // Ban ƒë·∫ßu ·∫©n c√¢u tr·∫£ l·ªùi
        answerDiv.className = `answer-display hidden`;
        answerDiv.innerHTML = `<strong>A:</strong> <span class="card-text answer-text">${escapeHtml(card.answer)}</span>`;

        const controlsDiv = document.createElement('div');
        controlsDiv.className = 'card-controls';

        const toggleButton = document.createElement('button');
        toggleButton.className = 'toggle-answer-btn';
        toggleButton.textContent = 'Hi·ªán/·∫®n ƒê√°p √Ån';

        const deleteButton = document.createElement('button');
        deleteButton.className = 'delete-card-btn';
        deleteButton.textContent = 'X√≥a';

        controlsDiv.appendChild(toggleButton);
        controlsDiv.appendChild(deleteButton);

        cardEl.appendChild(questionDiv);
        cardEl.appendChild(answerDiv);
        cardEl.appendChild(controlsDiv);

        fragment.appendChild(cardEl);
    });

    container.appendChild(fragment);
}


// --- H√†m c·∫≠p nh·∫≠t Dropdowns ---

/**
 * ƒêi·ªÅn c√°c th∆∞ m·ª•c v√†o dropdown ch·ªçn th∆∞ m·ª•c cha (#parent-folder-select).
 * Ch·ªâ l·∫•y c√°c th∆∞ m·ª•c t·ª´ currentHierarchyData.
 */
function populateParentFolderSelect() {
    const parentSelect = document.getElementById('parent-folder-select');
    if (!parentSelect) return;
    parentSelect.innerHTML = '<option value="">-- G·ªëc (Kh√¥ng c√≥ th∆∞ m·ª•c cha) --</option>'; // Reset v√† th√™m t√πy ch·ªçn g·ªëc

    const fragment = document.createDocumentFragment();

    function addFoldersToSelect(items) {
        items.forEach(item => {
            if (item.type === 'folder') {
                const option = document.createElement('option');
                option.value = item.id;
                option.textContent = item.name;
                fragment.appendChild(option);
                // ƒê·ªá quy n·∫øu th∆∞ m·ª•c c√≥ con (ƒë·ªÉ hi·ªÉn th·ªã c·∫•u tr√∫c ph·∫≥ng)
                if (item.children && item.children.length > 0) {
                    addFoldersToSelect(item.children);
                }
            }
        });
    }

    addFoldersToSelect(currentHierarchyData);
    parentSelect.appendChild(fragment);
}

/**
 * ƒêi·ªÅn c√°c th∆∞ m·ª•c v√†o dropdown ch·ªçn ƒë√≠ch di chuy·ªÉn (#move-target-folder-select).
 */
function populateMoveTargetSelect() {
    const moveSelect = document.getElementById('move-target-folder-select');
    if (!moveSelect) return;

    const currentId = currentSelectedItem?.id;
    const currentType = currentSelectedItem?.type;
    const currentParentId = currentSelectedItem?.parent_id ?? currentSelectedItem?.folder_id; // L·∫•y parent_id ho·∫∑c folder_id

    // Reset n·ªôi dung v√† t·∫°o fragment
    moveSelect.innerHTML = `
        <option value="">-- Ch·ªçn th∆∞ m·ª•c ƒë√≠ch --</option>
        <option value="root">-- Di chuy·ªÉn ra G·ªëc --</option>
    `;
    const fragment = document.createDocumentFragment();

    function addTargetFolders(items, currentItemId, currentItemType) {
        items.forEach(item => {
            if (item.type === 'folder') {
                // Kh√¥ng th·ªÉ di chuy·ªÉn v√†o ch√≠nh n√≥
                // Kh√¥ng th·ªÉ di chuy·ªÉn th∆∞ m·ª•c v√†o th∆∞ m·ª•c con c·ªßa n√≥ (c·∫ßn ki·ªÉm tra ph·ª©c t·∫°p h∆°n n·∫øu c·∫ßn)
                if (item.id !== currentItemId) {
                    const option = document.createElement('option');
                    option.value = item.id;
                    option.textContent = item.name;
                    // Kh√¥ng cho ph√©p di chuy·ªÉn v√†o th∆∞ m·ª•c cha hi·ªán t·∫°i
                    if (item.id === currentParentId) {
                         option.disabled = true;
                    }
                    fragment.appendChild(option);
                }
                // ƒê·ªá quy cho th∆∞ m·ª•c con
                if (item.children && item.children.length > 0) {
                    addTargetFolders(item.children, currentItemId, currentItemType);
                }
            }
        });
    }

    addTargetFolders(currentHierarchyData, currentId, currentType);
    moveSelect.appendChild(fragment);

    // X·ª≠ l√Ω disable option "root" v√† select/button
    const rootOption = moveSelect.querySelector('option[value="root"]');
    const moveButton = document.getElementById('move-item-btn');
    const disableControls = !currentSelectedItem;

    moveSelect.disabled = disableControls;
    if (moveButton) moveButton.disabled = disableControls || moveSelect.value === ""; // Disable n·∫øu ch∆∞a ch·ªçn ƒë√≠ch

    if (rootOption) {
        // Ch·ªâ disable root n·∫øu item ƒë√£ ·ªü g·ªëc
        rootOption.disabled = !currentParentId;
    }

    // Listener ƒë·ªÉ enable/disable n√∫t Move khi ch·ªçn ƒë√≠ch
    moveSelect.onchange = () => {
        if (moveButton) moveButton.disabled = !currentSelectedItem || moveSelect.value === "";
    };
}

// --- H√†m chuy·ªÉn ƒë·ªïi View ---

/**
 * Hi·ªÉn th·ªã view qu·∫£n l√Ω th∆∞ m·ª•c/nh√≥m (hierarchy-view).
 */
function showGroupManagementView() {
    if (hierarchyView) hierarchyView.classList.remove('hidden');
    if (flashcardView) flashcardView.classList.add('hidden');
    if (mindmapView) mindmapView.classList.add('hidden');

    // Kh√¥ng c·∫ßn render l·∫°i ·ªü ƒë√¢y, renderHierarchyView s·∫Ω ƒë∆∞·ª£c g·ªçi sau khi fetch
    // Ch·ªâ c·∫ßn ƒë·∫£m b·∫£o c√°c control ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    updateManagementControlsState();
    populateMoveTargetSelect(); // C·∫≠p nh·∫≠t dropdown di chuy·ªÉn
}

/**
 * Hi·ªÉn th·ªã view flashcard cho m·ªôt nh√≥m c·ª• th·ªÉ.
 * @param {object} group - ƒê·ªëi t∆∞·ª£ng nh√≥m t·ª´ currentHierarchyData.
 */
async function showFlashcardView(group) {
    if (!group || group.type !== 'group') {
        console.error("UI Error: showFlashcardView y√™u c·∫ßu m·ªôt ƒë·ªëi t∆∞·ª£ng group h·ª£p l·ªá.");
        showGroupManagementView(); // Quay l·∫°i view ch√≠nh n·∫øu l·ªói
        return;
    }
    currentSelectedItem = group; // C·∫≠p nh·∫≠t m·ª•c ƒëang ch·ªçn

    // ·∫®n c√°c view kh√°c, hi·ªán flashcard view
    if (hierarchyView) hierarchyView.classList.add('hidden');
    if (mindmapView) mindmapView.classList.add('hidden');
    if (flashcardView) flashcardView.classList.remove('hidden');
    if (flashcardViewTitle) flashcardViewTitle.textContent = `Flashcards: ${escapeHtml(group.name)}`;

    // Hi·ªÉn th·ªã c√°c th√†nh ph·∫ßn con c·ªßa flashcard view
    const addCardSection = flashcardView.querySelector('.add-card');
    const quizControls = flashcardView.querySelector('#quiz-controls');
    const flashcardsContainer = flashcardView.querySelector('#flashcards');
    const quizContainer = flashcardView.querySelector('#quiz-container');

    if (addCardSection) addCardSection.classList.remove('hidden');
    if (quizControls) quizControls.classList.remove('hidden');
    if (flashcardsContainer) flashcardsContainer.classList.remove('hidden');
    if (quizContainer) quizContainer.classList.add('hidden'); // ƒê·∫£m b·∫£o quiz ·∫©n

    // X√≥a th·∫ª c≈© v√† hi·ªÉn th·ªã loading...
    currentCards = [];
    renderCardsView(); // Render tr·∫°ng th√°i r·ªóng/loading ban ƒë·∫ßu
    flashcardsContainer.innerHTML = '<p>ƒêang t·∫£i th·∫ª...</p>';

    // T·∫£i th·∫ª t·ª´ API
    try {
        console.log(`UI: Fetching cards for group ${group.id}`);
        currentCards = await getCardsForGroupAPI(group.id); // G·ªçi API t·ª´ db.js
        console.log("UI: Cards loaded:", currentCards);
        renderCardsView(); // Render l·∫°i v·ªõi th·∫ª m·ªõi t·∫£i
        checkPausedQuiz(); // Ki·ªÉm tra quiz ƒëang t·∫°m d·ª´ng
    } catch (error) {
        console.error(`UI: Failed to load cards for group ${group.id}`, error);
        showToastNotification(`L·ªói t·∫£i th·∫ª: ${error.message}`, "error");
        flashcardsContainer.innerHTML = `<p style="color: red;">Kh√¥ng th·ªÉ t·∫£i th·∫ª.</p>`;
        document.getElementById('start-quiz-btn').disabled = true;
    }

    // Th√™m/C·∫≠p nh·∫≠t n√∫t M·ªü Mind Map
    const controlsContainer = flashcardView.querySelector('#quiz-controls');
    let openMindmapBtn = document.getElementById('open-mindmap-btn');
    if (!openMindmapBtn && controlsContainer) {
        openMindmapBtn = document.createElement('button');
        openMindmapBtn.id = 'open-mindmap-btn';
        openMindmapBtn.textContent = ' M·ªü Mind Map';
        openMindmapBtn.style.marginLeft = '10px';
        controlsContainer.appendChild(openMindmapBtn);
    }
    if (openMindmapBtn) {
        // Lu√¥n c·∫≠p nh·∫≠t onclick ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√∫ng group hi·ªán t·∫°i
        openMindmapBtn.onclick = () => showMindmapView(group);
    }
}

/**
 * Hi·ªÉn th·ªã view mindmap cho m·ªôt nh√≥m.
 * @param {object} group - ƒê·ªëi t∆∞·ª£ng nh√≥m.
 */
async function showMindmapView(group) {
     if (!group || group.type !== 'group') {
        console.error("UI Error: showMindmapView y√™u c·∫ßu m·ªôt ƒë·ªëi t∆∞·ª£ng group h·ª£p l·ªá.");
        return;
    }
    currentSelectedItem = group; // C·∫≠p nh·∫≠t m·ª•c ƒëang ch·ªçn (quan tr·ªçng cho n√∫t Save)
    console.log(`UI: Showing mindmap view for group: ${group.name} (${group.id})`);

    // ·∫®n c√°c view kh√°c, hi·ªán mindmap view
    if (hierarchyView) hierarchyView.classList.add('hidden');
    if (flashcardView) flashcardView.classList.add('hidden');
    if (mindmapView) mindmapView.classList.remove('hidden');
    if (mindmapViewTitle) mindmapViewTitle.textContent = `Mind Map: ${escapeHtml(group.name)}`;

    // Reset tr·∫°ng th√°i mindmap
    if (mindmapMarkdownInput) mindmapMarkdownInput.value = 'ƒêang t·∫£i mindmap...';
    if (mindmapSvgElement) mindmapSvgElement.innerHTML = '';
    if (currentMindmapInstance) { /* ... h·ªßy instance c≈© ... */ }
    currentMindmapContent = null;

    // T·∫£i n·ªôi dung mindmap t·ª´ API
    try {
        console.log(`UI: Fetching mindmap for group ${group.id}`);
        const mindmapData = await getMindmapAPI(group.id); // G·ªçi API t·ª´ db.js
        currentMindmapContent = mindmapData?.markdown_content ?? ''; // L·∫•y n·ªôi dung ho·∫∑c chu·ªói r·ªóng

        console.log("UI: Mindmap loaded, content length:", currentMindmapContent.length);

        if (mindmapMarkdownInput) {
            mindmapMarkdownInput.value = currentMindmapContent;
            // G·∫Øn listener debounce (x√≥a c≈© n·∫øu c√≥)
            mindmapMarkdownInput.removeEventListener('input', debouncedRenderMindmapPreview);
            mindmapMarkdownInput.addEventListener('input', debouncedRenderMindmapPreview);
        }
        // Render preview ban ƒë·∫ßu
        renderCurrentMindmapPreview();

    } catch (error) {
        console.error(`UI: Failed to load mindmap for group ${group.id}`, error);
        showToastNotification(`L·ªói t·∫£i mindmap: ${error.message}`, "error");
        if (mindmapMarkdownInput) mindmapMarkdownInput.value = `# L·ªói t·∫£i mindmap\n\n${error.message}`;
    }
}

// H√†m render preview mindmap (gi·ªØ nguy√™n logic render, ch·ªâ c·∫ßn ƒë·∫£m b·∫£o bi·∫øn to√†n c·ª•c ƒë√∫ng)
function renderCurrentMindmapPreview() {
    // ... (Gi·ªØ nguy√™n logic render Markmap nh∆∞ tr∆∞·ªõc) ...
    // ƒê·∫£m b·∫£o n√≥ ƒë·ªçc markdown t·ª´ mindmapMarkdownInput.value
     const markdown = mindmapMarkdownInput?.value ?? ''; // L·∫•y markdown t·ª´ input
     // ... ph·∫ßn c√≤n l·∫°i c·ªßa h√†m render ...
     if (!mindmapMarkdownInput || !mindmapSvgElement) {
        console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ input ho·∫∑c SVG cho mindmap.");
        return;
    }

    if (!markdown.trim()) {
        mindmapSvgElement.innerHTML = '<p style="text-align: center; padding: 20px;">Nh·∫≠p n·ªôi dung Markdown ƒë·ªÉ xem tr∆∞·ªõc.</p>';
        if (currentMindmapInstance) { /* ... h·ªßy instance c≈© ... */ }
        return;
    }
     try {
        if (currentMindmapInstance) { /* ... h·ªßy instance c≈© ... */ }

        if (typeof markmap === 'undefined' || typeof markmap.Transformer === 'undefined' || typeof markmap.Markmap === 'undefined') {
             console.error("L·ªói: Th∆∞ vi·ªán Markmap ch∆∞a ƒë∆∞·ª£c t·∫£i ƒë√∫ng c√°ch.");
             mindmapSvgElement.innerHTML = `<p style="color: red; padding: 10px;">L·ªói: Th∆∞ vi·ªán Markmap ch∆∞a ƒë∆∞·ª£c t·∫£i.</p>`;
             return;
        }

        const { Transformer } = markmap;
        const transformerInstance = new Transformer();
        const { root, features } = transformerInstance.transform(markdown);

        currentMindmapInstance = new markmap.Markmap(mindmapSvgElement, undefined, { autoFit: true, duration: 500 });
        currentMindmapInstance.setData(root);

    } catch (error) {
        console.error("L·ªói khi render Markmap:", error);
        mindmapSvgElement.innerHTML = `<p style="color: red; padding: 10px;">L·ªói render Markmap: ${error.message}</p>`;
        if (currentMindmapInstance) { /* ... h·ªßy instance c≈© ... */ }
    }
}

// --- H√†m x·ª≠ l√Ω s·ª± ki·ªán v√† g·ªçi API ---

/**
 * X·ª≠ l√Ω click v√†o m·ªôt m·ª•c trong c√¢y hierarchy.
 * @param {Event} event - S·ª± ki·ªán click.
 */
async function handleHierarchyItemClick(event) {
    const targetItem = event.target.closest('.hierarchy-item');
    if (!targetItem) return;

    const itemId = parseInt(targetItem.dataset.id, 10); // Chuy·ªÉn sang s·ªë
    const itemType = targetItem.dataset.type;

    if (isNaN(itemId) || !itemType) {
        console.error("UI Error: Kh√¥ng th·ªÉ l·∫•y ID ho·∫∑c Type t·ª´ item ƒë∆∞·ª£c click.");
        return;
    }

    // T√¨m item trong d·ªØ li·ªáu ƒë√£ fetch (kh√¥ng c·∫ßn g·ªçi API l·∫°i)
    // C·∫ßn h√†m t√¨m ki·∫øm ƒë·ªá quy trong currentHierarchyData
    function findItemByIdRecursive(items, id, type) {
        for (const item of items) {
            if (item.id === id && item.type === type) {
                return item;
            }
            if (item.type === 'folder' && item.children && item.children.length > 0) {
                const found = findItemByIdRecursive(item.children, id, type);
                if (found) return found;
            }
        }
        return null;
    }

    const selectedItem = findItemByIdRecursive(currentHierarchyData, itemId, itemType);

    if (!selectedItem) {
        console.error(`UI Error: Kh√¥ng t√¨m th·∫•y item v·ªõi ID ${itemId} v√† Type ${itemType} trong d·ªØ li·ªáu.`);
        // C√≥ th·ªÉ fetch l·∫°i hierarchy ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        // await loadAndRenderHierarchy();
        return;
    }

    currentSelectedItem = selectedItem; // C·∫≠p nh·∫≠t m·ª•c ƒëang ch·ªçn

    // X√≥a class 'selected' c≈© v√† th√™m v√†o c√°i m·ªõi
    document.querySelectorAll('#hierarchy-container .hierarchy-item.selected')
            .forEach(el => el.classList.remove('selected'));
    targetItem.classList.add('selected');

    console.log("UI: Selected item:", currentSelectedItem);

    if (itemType === 'group') {
        // N·∫øu l√† nh√≥m -> hi·ªÉn th·ªã flashcard view (s·∫Ω t·ª± ƒë·ªông t·∫£i th·∫ª)
        await showFlashcardView(selectedItem);
    } else if (itemType === 'folder') {
        // N·∫øu l√† th∆∞ m·ª•c -> ch·ªâ c·∫≠p nh·∫≠t tr·∫°ng th√°i qu·∫£n l√Ω
        showGroupManagementView(); // ƒê·∫£m b·∫£o ƒëang ·ªü view qu·∫£n l√Ω
        updateManagementControlsState();
        populateMoveTargetSelect();
    }
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán click tr√™n container flashcards (x√≥a th·∫ª, hi·ªán/·∫©n ƒë√°p √°n).
 */
async function handleFlashcardContainerClick(event) {
    const target = event.target;
    const cardElement = target.closest('.flashcard');
    if (!cardElement) return;

    const cardId = parseInt(cardElement.dataset.cardId, 10);
    if (isNaN(cardId)) return;

    // X·ª≠ l√Ω n√∫t x√≥a th·∫ª
    if (target.matches('.delete-card-btn')) {
        if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th·∫ª n√†y kh√¥ng?')) return;

        console.log(`UI: Deleting card ${cardId}`);
        try {
            await deleteCardAPI(cardId); // G·ªçi API t·ª´ db.js
            showToastNotification("ƒê√£ x√≥a th·∫ª th√†nh c√¥ng.", "success");
            // X√≥a th·∫ª kh·ªèi m·∫£ng currentCards v√† render l·∫°i
            currentCards = currentCards.filter(card => card.id !== cardId);
            renderCardsView();
        } catch (error) {
            console.error(`UI: Failed to delete card ${cardId}`, error);
            showToastNotification(`L·ªói x√≥a th·∫ª: ${error.message}`, "error");
        }
        return; // D·ª´ng x·ª≠ l√Ω ti·∫øp
    }

    // X·ª≠ l√Ω n√∫t Hi·ªán/·∫®n ƒê√°p √Ån
    if (target.matches('.toggle-answer-btn')) {
        const answerDiv = cardElement.querySelector('.answer-display');
        if (answerDiv) {
            answerDiv.classList.toggle('hidden');
        }
    }

    // X·ª≠ l√Ω click v√†o th·∫ª ƒë·ªÉ hi·ªán/·∫©n ƒë√°p √°n (n·∫øu mu·ªën)
    // if (!target.matches('button')) {
    //     const answerDiv = cardElement.querySelector('.answer-display');
    //     if (answerDiv) {
    //         answerDiv.classList.toggle('hidden');
    //     }
    // }
}

/**
 * T·∫°o m·ª•c m·ªõi (th∆∞ m·ª•c ho·∫∑c nh√≥m).
 */
async function createNewItem() {
    const nameInput = document.getElementById('new-item-name');
    const typeSelect = document.getElementById('new-item-type');
    const parentSelect = document.getElementById('parent-folder-select');

    const name = nameInput.value.trim();
    const type = typeSelect.value; // 'folder' ho·∫∑c 'group'
    // L·∫•y parentId: null n·∫øu ch·ªçn "-- G·ªëc --", ng∆∞·ª£c l·∫°i l√† gi√° tr·ªã s·ªë
    const parentId = parentSelect.value ? parseInt(parentSelect.value, 10) : null;

    if (!name) {
        showToastNotification("Vui l√≤ng nh·∫≠p t√™n.", "warning");
        return;
    }

    console.log(`UI: Creating new ${type}: ${name}, parentId: ${parentId}`);
    try {
        // G·ªçi API t·∫°o m·ªõi t·ª´ db.js
        const newItem = await createItemAPI(name, type, parentId);
        showToastNotification(`${type === 'folder' ? 'Th∆∞ m·ª•c' : 'Nh√≥m'} "${newItem.name}" ƒë√£ ƒë∆∞·ª£c t·∫°o.`, "success");

        // Reset input
        nameInput.value = '';
        typeSelect.value = 'folder'; // Reset v·ªÅ folder
        parentSelect.value = '';
        parentSelect.style.display = 'none';

        // T·∫£i l·∫°i v√† render hierarchy ƒë·ªÉ c·∫≠p nh·∫≠t
        await loadAndRenderHierarchy();

    } catch (error) {
        console.error("UI: Failed to create item", error);
        showToastNotification(`L·ªói t·∫°o m·ª•c: ${error.message}`, "error");
    }
}

/**
 * ƒê·ªïi t√™n m·ª•c ƒëang ƒë∆∞·ª£c ch·ªçn.
 */
async function renameCurrentItem() {
    const renameInput = document.getElementById('rename-item');
    const newName = renameInput.value.trim();

    if (!currentSelectedItem) {
        showToastNotification("Vui l√≤ng ch·ªçn m·ªôt th∆∞ m·ª•c ho·∫∑c nh√≥m ƒë·ªÉ ƒë·ªïi t√™n.", "warning");
        return;
    }
    if (!newName) {
        showToastNotification("Vui l√≤ng nh·∫≠p t√™n m·ªõi.", "warning");
        return;
    }
    if (newName === currentSelectedItem.name) {
        showToastNotification("T√™n m·ªõi gi·ªëng t√™n c≈©.", "info");
        return;
    }

    const itemId = currentSelectedItem.id;
    const itemType = currentSelectedItem.type;

    console.log(`UI: Renaming ${itemType} ${itemId} to ${newName}`);
    try {
        // G·ªçi API ƒë·ªïi t√™n t·ª´ db.js
        const updatedItem = await updateItemNameAPI(itemId, itemType, newName);
        showToastNotification("ƒê·ªïi t√™n th√†nh c√¥ng.", "success");
        renameInput.value = ''; // X√≥a input

        // T·∫£i l·∫°i v√† render hierarchy ƒë·ªÉ c·∫≠p nh·∫≠t
        await loadAndRenderHierarchy();
        // C·∫≠p nh·∫≠t currentSelectedItem n·∫øu n√≥ v·∫´n t·ªìn t·∫°i sau khi fetch l·∫°i
        // (C·∫ßn t√¨m l·∫°i trong currentHierarchyData m·ªõi)
        currentSelectedItem = findItemByIdRecursive(currentHierarchyData, itemId, itemType);


    } catch (error) {
        console.error(`UI: Failed to rename ${itemType} ${itemId}`, error);
        showToastNotification(`L·ªói ƒë·ªïi t√™n: ${error.message}`, "error");
    }
}

/**
 * X√≥a m·ª•c ƒëang ƒë∆∞·ª£c ch·ªçn.
 */
async function deleteCurrentItem() {
    if (!currentSelectedItem) {
        showToastNotification("Vui l√≤ng ch·ªçn m·ªôt th∆∞ m·ª•c ho·∫∑c nh√≥m ƒë·ªÉ x√≥a.", "warning");
        return;
    }

    const itemName = currentSelectedItem.name;
    const itemType = currentSelectedItem.type;
    const itemId = currentSelectedItem.id;
    const typeText = itemType === 'folder' ? 'th∆∞ m·ª•c' : 'nh√≥m';
    const confirmMessage = `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ${typeText} "${itemName}" kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c v√† s·∫Ω x√≥a t·∫•t c·∫£ n·ªôi dung b√™n trong (nh√≥m con, th·∫ª, mindmap).`;

    if (!confirm(confirmMessage)) return;

    console.log(`UI: Deleting ${itemType} ${itemId}`);
    try {
        // G·ªçi API x√≥a t·ª´ db.js
        await deleteItemAPI(itemId, itemType);
        showToastNotification(`${typeText} "${itemName}" ƒë√£ ƒë∆∞·ª£c x√≥a.`, "success");

        // Reset l·ª±a ch·ªçn hi·ªán t·∫°i v√† t·∫£i l·∫°i hierarchy
        currentSelectedItem = null;
        await loadAndRenderHierarchy();

    } catch (error) {
        console.error(`UI: Failed to delete ${itemType} ${itemId}`, error);
        showToastNotification(`L·ªói x√≥a ${typeText}: ${error.message}`, "error");
    }
}

/**
 * Di chuy·ªÉn m·ª•c ƒëang ƒë∆∞·ª£c ch·ªçn.
 */
async function moveCurrentItem() {
    const moveSelect = document.getElementById('move-target-folder-select');
    const targetValue = moveSelect.value; // "root" ho·∫∑c ID th∆∞ m·ª•c ƒë√≠ch (d·∫°ng string)

    if (!currentSelectedItem) {
        showToastNotification("Vui l√≤ng ch·ªçn m·ª•c c·∫ßn di chuy·ªÉn.", "warning");
        return;
    }
    if (targetValue === "") {
        showToastNotification("Vui l√≤ng ch·ªçn th∆∞ m·ª•c ƒë√≠ch ho·∫∑c 'G·ªëc'.", "warning");
        return;
    }

    const itemId = currentSelectedItem.id;
    const itemType = currentSelectedItem.type;
    // Chuy·ªÉn targetValue sang ID s·ªë ho·∫∑c null
    const targetParentId = targetValue === 'root' ? null : parseInt(targetValue, 10);

     // Ki·ªÉm tra n·∫øu targetParentId kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i s·ªë v√† kh√¥ng ph·∫£i null)
     if (targetValue !== 'root' && isNaN(targetParentId)) {
        showToastNotification("Th∆∞ m·ª•c ƒë√≠ch kh√¥ng h·ª£p l·ªá.", "error");
        return;
     }

    console.log(`UI: Moving ${itemType} ${itemId} to target parent ID: ${targetParentId}`);
    try {
        // G·ªçi API di chuy·ªÉn t·ª´ db.js
        await moveItemAPI(itemId, itemType, targetParentId);
        showToastNotification("Di chuy·ªÉn m·ª•c th√†nh c√¥ng.", "success");

        // Reset dropdown v√† t·∫£i l·∫°i hierarchy
        moveSelect.value = "";
        document.getElementById('move-item-btn').disabled = true;
        await loadAndRenderHierarchy();
        // C·∫≠p nh·∫≠t l·∫°i currentSelectedItem n·∫øu c·∫ßn
        currentSelectedItem = findItemByIdRecursive(currentHierarchyData, itemId, itemType);


    } catch (error) {
        console.error(`UI: Failed to move ${itemType} ${itemId}`, error);
        showToastNotification(`L·ªói di chuy·ªÉn m·ª•c: ${error.message}`, "error");
    }
}

/**
 * Th√™m th·∫ª m·ªõi v√†o nh√≥m hi·ªán t·∫°i.
 */
async function addCard() {
    const questionInput = document.getElementById('question');
    const answerInput = document.getElementById('answer');
    const question = questionInput.value.trim();
    const answer = answerInput.value.trim();

    if (!currentSelectedItem || currentSelectedItem.type !== 'group') {
        showToastNotification("Vui l√≤ng ch·ªçn m·ªôt nh√≥m b√†i h·ªçc tr∆∞·ªõc khi th√™m th·∫ª.", "warning");
        return;
    }
    if (!question || !answer) {
        showToastNotification("Vui l√≤ng nh·∫≠p c·∫£ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi.", "warning");
        return;
    }

    const groupId = currentSelectedItem.id;
    console.log(`UI: Adding card to group ${groupId}`);
    try {
        // G·ªçi API th√™m th·∫ª t·ª´ db.js
        const newCard = await addCardToGroupAPI(groupId, question, answer);
        showToastNotification("ƒê√£ th√™m th·∫ª th√†nh c√¥ng.", "success");

        // Th√™m th·∫ª m·ªõi v√†o m·∫£ng currentCards v√† render l·∫°i
        currentCards.push(newCard);
        renderCardsView();

        // X√≥a input
        questionInput.value = '';
        answerInput.value = '';

    } catch (error) {
        console.error(`UI: Failed to add card to group ${groupId}`, error);
        showToastNotification(`L·ªói th√™m th·∫ª: ${error.message}`, "error");
    }
}

/**
 * L∆∞u n·ªôi dung mindmap hi·ªán t·∫°i.
 */
async function saveCurrentMindmap() {
    if (!currentSelectedItem || currentSelectedItem.type !== 'group') {
        showToastNotification("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c nh√≥m ƒë·ªÉ l∆∞u mindmap.", "error");
        return;
    }
    if (!mindmapMarkdownInput) {
        console.error("UI Error: Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p li·ªáu mindmap.");
        return;
    }

    const groupId = currentSelectedItem.id;
    const markdownContent = mindmapMarkdownInput.value;

    console.log(`UI: Saving mindmap for group ${groupId}`);
    try {
        // G·ªçi API l∆∞u mindmap t·ª´ db.js
        await saveMindmapAPI(groupId, markdownContent);
        currentMindmapContent = markdownContent; // C·∫≠p nh·∫≠t n·ªôi dung ƒë√£ l∆∞u
        showToastNotification("ƒê√£ l∆∞u mindmap th√†nh c√¥ng.", "success");
    } catch (error) {
        console.error(`UI: Failed to save mindmap for group ${groupId}`, error);
        showToastNotification(`L·ªói l∆∞u mindmap: ${error.message}`, "error");
    }
}

// --- C·∫≠p nh·∫≠t tr·∫°ng th√°i UI ---

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i enable/disable c·ªßa c√°c n√∫t qu·∫£n l√Ω.
 */
function updateManagementControlsState() {
    const renameInput = document.getElementById('rename-item');
    const renameButton = document.getElementById('rename-item-btn'); // Gi·∫£ s·ª≠ ID n√∫t l√† rename-item-btn
    const deleteButton = document.getElementById('delete-item-btn'); // Gi·∫£ s·ª≠ ID n√∫t l√† delete-item-btn
    const moveSelect = document.getElementById('move-target-folder-select');
    const moveButton = document.getElementById('move-item-btn');

    const itemIsSelected = !!currentSelectedItem;

    if (renameInput) renameInput.disabled = !itemIsSelected;
    if (renameButton) renameButton.disabled = !itemIsSelected;
    if (deleteButton) deleteButton.disabled = !itemIsSelected;
    if (moveSelect) moveSelect.disabled = !itemIsSelected;
    // N√∫t move s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω th√™m trong populateMoveTargetSelect
    if (moveButton) moveButton.disabled = !itemIsSelected || (moveSelect && moveSelect.value === "");

     // ƒêi·ªÅn t√™n hi·ªán t·∫°i v√†o √¥ rename n·∫øu c√≥ item ƒë∆∞·ª£c ch·ªçn
     if (renameInput && currentSelectedItem) {
        renameInput.value = currentSelectedItem.name;
     } else if (renameInput) {
        renameInput.value = ''; // X√≥a n·∫øu kh√¥ng c√≥ g√¨ ƒë∆∞·ª£c ch·ªçn
     }
}

// --- Kh·ªüi t·∫°o v√† G·∫Øn Listener ---

document.addEventListener('DOMContentLoaded', () => {
    console.log("UI: DOM fully loaded and parsed.");
    applyInitialTheme(); // √Åp d·ª•ng theme ƒë√£ l∆∞u

    // G·∫Øn listener cho c√°c n√∫t/input ch√≠nh
    document.getElementById('theme-switch')?.addEventListener('change', toggleTheme);

    // Listener cho c√°c n√∫t qu·∫£n l√Ω chung (trong hierarchy-view)
    document.getElementById('add-item-btn')?.addEventListener('click', createNewItem);
    document.getElementById('rename-item-btn')?.addEventListener('click', renameCurrentItem);
    document.getElementById('delete-item-btn')?.addEventListener('click', deleteCurrentItem);
    document.getElementById('move-item-btn')?.addEventListener('click', moveCurrentItem);
    document.getElementById('new-item-type')?.addEventListener('change', function() {
        const parentSelect = document.getElementById('parent-folder-select');
        if (parentSelect) {
            parentSelect.style.display = this.value === 'group' ? 'inline-block' : 'none';
            if(this.value === 'group') populateParentFolderSelect(); // C·∫≠p nh·∫≠t khi ch·ªçn group
        }
    });

    // Listener cho view flashcard
    document.getElementById('add-card-btn')?.addEventListener('click', addCard);
    document.getElementById('back-to-groups-btn')?.addEventListener('click', () => {
        currentSelectedItem = null; // B·ªè ch·ªçn item hi·ªán t·∫°i
        showGroupManagementView();
        // C√≥ th·ªÉ c·∫ßn fetch l·∫°i hierarchy n·∫øu c√≥ thay ƒë·ªïi ng·∫ßm
        // loadAndRenderHierarchy();
    });
    // Event delegation cho container flashcards
    const flashcardsContainer = document.getElementById('flashcards');
    if (flashcardsContainer) {
        flashcardsContainer.addEventListener('click', handleFlashcardContainerClick);
    }

    // Listener cho view mindmap
    document.getElementById('save-mindmap-btn')?.addEventListener('click', saveCurrentMindmap);
    document.getElementById('back-to-flashcards-btn')?.addEventListener('click', () => {
        // Quay l·∫°i view flashcard c·ªßa nh√≥m hi·ªán t·∫°i (currentSelectedItem)
        if (currentSelectedItem && currentSelectedItem.type === 'group') {
            showFlashcardView(currentSelectedItem); // Kh√¥ng c·∫ßn await v√¨ ch·ªâ chuy·ªÉn view
        } else {
            showGroupManagementView(); // N·∫øu kh√¥ng c√≥ nh√≥m n√†o ƒëang ch·ªçn th√¨ v·ªÅ view ch√≠nh
        }
    });

    // Event delegation cho hierarchy container
    const hierarchyContainer = document.getElementById('hierarchy-container');
    if (hierarchyContainer) {
        hierarchyContainer.addEventListener('click', handleHierarchyItemClick);
    }

    // T·∫£i d·ªØ li·ªáu hierarchy ban ƒë·∫ßu
    loadAndRenderHierarchy();

    // Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn UI kh√°c n·∫øu c·∫ßn
    // V√≠ d·ª•: Kh·ªüi t·∫°o quiz elements n·∫øu c√≥
});


// --- C√°c h√†m li√™n quan ƒë·∫øn Quiz (C·∫ßn xem x√©t l·∫°i) ---
// C√°c h√†m nh∆∞ startQuiz, resumeQuiz, pauseQuiz, checkAnswer, nextQuestion, updateScoreDisplay
// c·∫ßn ƒë∆∞·ª£c ki·ªÉm tra l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o ch√∫ng ho·∫°t ƒë·ªông v·ªõi c·∫•u tr√∫c d·ªØ li·ªáu m·ªõi (currentCards)
// v√† c√°ch l·∫•y d·ªØ li·ªáu th·∫ª. H√†m checkPausedQuiz d√πng localStorage c√≥ th·ªÉ v·∫´n ·ªïn.

function checkPausedQuiz() {
    const savedProgress = JSON.parse(localStorage.getItem('quizProgress') || 'null');
    const resumeButtonContainer = document.getElementById('quiz-controls'); // Container ch·ª©a n√∫t resume
    let resumeButton = document.getElementById('resume-quiz-btn');

    // X√≥a n√∫t Resume c≈© n·∫øu c√≥
    if (resumeButton) {
        resumeButton.remove();
    }

    // Ch·ªâ hi·ªÉn th·ªã n√∫t resume n·∫øu ƒëang ·ªü ƒë√∫ng nh√≥m ƒë√£ l∆∞u
    if (savedProgress && currentSelectedItem && savedProgress.groupId === currentSelectedItem.id) {
        const groupName = currentSelectedItem.name || 'Nh√≥m ƒë√£ l∆∞u'; // L·∫•y t√™n t·ª´ item ƒëang ch·ªçn
        const savedTime = new Date(savedProgress.timestamp).toLocaleString();

        resumeButton = document.createElement('button');
        resumeButton.id = 'resume-quiz-btn';
        resumeButton.className = 'resume-button';
        // C·∫≠p nh·∫≠t text n√∫t resume
        resumeButton.textContent = `Ti·∫øp t·ª•c Quiz (${groupName} - ${savedProgress.mastered}/${savedProgress.cardIds.length} thu·ªôc)`;
        resumeButton.title = `L∆∞u l√∫c: ${savedTime}`;
        resumeButton.onclick = resumeQuiz; // H√†m resumeQuiz c·∫ßn ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a

        if (resumeButtonContainer) {
            resumeButtonContainer.appendChild(resumeButton);
            document.getElementById('start-quiz-btn').textContent = "B·∫Øt ƒë·∫ßu Quiz M·ªõi";
        }
    } else {
        // N·∫øu kh√¥ng c√≥ progress ho·∫∑c kh√¥ng kh·ªõp nh√≥m, ƒë·∫£m b·∫£o n√∫t Start l√† m·∫∑c ƒë·ªãnh
        const startBtn = document.getElementById('start-quiz-btn');
        if(startBtn) startBtn.textContent = "B·∫Øt ƒë·∫ßu Quiz";
    }
}

// Placeholder cho c√°c h√†m quiz kh√°c - b·∫°n c·∫ßn tri·ªÉn khai ch√∫ng
function startQuiz() { console.warn("startQuiz() ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai ho√†n ch·ªânh v·ªõi API."); }
function resumeQuiz() { console.warn("resumeQuiz() ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai ho√†n ch·ªânh v·ªõi API."); }
function pauseQuiz() { console.warn("pauseQuiz() ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai ho√†n ch·ªânh v·ªõi API."); }
function checkAnswer() { console.warn("checkAnswer() ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai ho√†n ch·ªânh v·ªõi API."); }
function nextQuestion() { console.warn("nextQuestion() ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai ho√†n ch·ªânh v·ªõi API."); }
function updateScoreDisplay() { console.warn("updateScoreDisplay() ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai ho√†n ch·ªânh v·ªõi API."); }

